// Generated by CoffeeScript 1.8.0
(function() {
  'use strict';
  var chat, spa;

  chat = (function() {
    var configMap, configModule, initModule, jqueryMap, setJqueryMap, stateMap;
    configMap = {
      main_html: '<div style="padding:1em; color:#fff"> Say hello to chat </div>',
      settable_map: {}
    };
    stateMap = {};
    jqueryMap = {};
    setJqueryMap = function() {
      var $container;
      $container = stateMap.$container;
      return jqueryMap = {
        $container: $container
      };
    };
    configModule = function(input_map) {
      spa.util.setCnofigMap({
        input_map: input_map,
        settable_map: configMap.settable_map,
        config_map: configMap
      });
      return true;
    };
    initModule = function($container) {
      $container.html(configMap.main_html);
      stateMap.$container = $container;
      setJqueryMap();
      return true;
    };
    return {
      configModule: configModule,
      initModule: initModule
    };
  })();

  'use strict';

  spa = (function() {
    return {
      initModule: function($container) {
        return spa.shell.initModule($container);
      }
    };
  })();

  window.spa = spa;

  'use strict';

  spa.shell = (function() {
    var changeAnchorPart, configMap, copyAnchorMap, initModule, jqueryMap, onClickChat, onHashchange, setJqueryMap, stateMap, toggleChat;
    configMap = {
      anchor_schema_map: {
        chat: {
          open: true,
          closed: true
        }
      },
      main_html: '<div class="spa-shell-head"> <div class="spa-shell-head-logo"></div> <div class="spa-shell-head-acct"></div> <div class="spa-shell-head-search"></div> </div> <div class="spa-shell-main"> <div class="spa-shell-main-nav"></div> <div class="spa-shell-main-content"></div> </div> <div class="spa-shell-foot"></div> <div class="spa-shell-chat"></div> <div class="spa-shell-modal"></div>',
      chat_extend_time: 1000,
      chat_retract_time: 300,
      chat_extend_height: 450,
      chat_retract_height: 15,
      chat_extended_title: 'Click to retract',
      chat_retracted_title: 'Click to extend'
    };
    stateMap = {
      $container: null,
      is_chat_retracted: true,
      anchor_map: {}
    };
    copyAnchorMap = function() {
      return $.extend(true, {}, stateMap.anchor_schema_map);
    };
    changeAnchorPart = function(arg_map) {
      var anchor_map_revise, bool_return, error, key_name, key_name_dep;
      anchor_map_revise = copyAnchorMap();
      bool_return = true;
      KEYVAL://;
      for (key_name in arg_map) {
        if (!arg_map.hasOwnProperty(key_name)) {
          continue;
        }
        if (key_name.indexOf('_') === 0) {
          continue KEYVAL;
        }
        anchor_map_revise[key_name] = arg_map[key_name];
        key_name_dep = "_" + key_name;
        if (arg_map[key_name_dep]) {
          anchor_map_revise[key_name_dep] = arg_map[key_name_dep];
        } else {
          delete anchor_map_revise[key_name_dep];
          delete anchor_map_revise["_s" + key_name_dep];
        }
      }
      try {
        $.uriAnchor.setAnchor(anchor_map_revise);
      } catch (_error) {
        error = _error;
        $.uriAnchor.setAnchor(stateMap.anchor_map, null, true);
        bool_return = false;
      }
      return bool_return;
    };
    onHashchange = function(event) {
      var anchor_map_previous, anchor_map_proposed, error, s_chat_proposed, _s_chat_previous, _s_chat_proposed;
      anchor_map_previous = copyAnchorMap();
      try {
        anchor_map_proposed = $.uriAnchor.makeAnchorMap();
      } catch (_error) {
        error = _error;
        $.uriAnchor.setAnchor(anchor_map_previous, null, true);
        return false;
      }
      stateMap.anchor_map = anchor_map_proposed;
      _s_chat_previous = anchor_map_previous._s_chat;
      _s_chat_proposed = anchor_map_proposed._s_chat;
      if ((!anchor_map_previous) || (_s_chat_previous !== _s_chat_proposed)) {
        s_chat_proposed = anchor_map_proposed.chat;
        switch (s_chat_proposed) {
          case 'open':
            toggleChat(true);
            break;
          case 'closed':
            toggleChat(false);
            break;
          default:
            toggleChat(false);
            delete anchor_map_proposed.chat;
            $.uriAnchor.setAnchor(anchor_map_proposed, null, true);
        }
      }
      return false;
    };
    jqueryMap = {};
    setJqueryMap = function() {
      var $container;
      $container = stateMap.$container;
      return jqueryMap = {
        $container: $container,
        $chat: $container.find('.spa-shell-chat')
      };
    };
    toggleChat = function(do_extend, callback) {
      var is_closed, is_open, is_sliding, px_chat_ht;
      px_chat_ht = jqueryMap.$chat.height();
      is_open = px_chat_ht === configMap.chat_extend_height;
      is_closed = px_chat_ht === configMap.chat_retract_height;
      is_sliding = !(is_open || is_closed);
      if (is_sliding) {
        return false;
      }
      if (do_extend) {
        jqueryMap.$chat.animate({
          height: configMap.chat_extend_height
        }, configMap.chat_extend_time, function() {
          jqueryMap.$chat.attr('title', configMap.chat_extend_title);
          stateMap.is_chat_retracted = false;
          if (callback) {
            return callback(jqueryMap.$chat);
          }
        });
        return true;
      }
      jqueryMap.$chat.animate({
        height: configMap.chat_retract_height
      }, configMap.chat_retract_time, function() {
        jqueryMap.$chat.attr('title', configMap.chat_retracted_title);
        stateMap.is_chat_retracted = true;
        if (callback) {
          return callback(jqueryMap.$chat);
        }
      });
      return true;
    };
    onClickChat = function(event) {
      changeAnchorPart({
        chat: (stateMap.is_chat_retracted ? 'open' : 'closed')
      });
      return false;
    };
    initModule = function($container) {
      stateMap.$container = $container;
      $container.html(configMap.main_html);
      setJqueryMap();
      stateMap.is_chat_retracted = true;
      jqueryMap.$chat.attr('title', configMap.chat_retracted_title).click(onClickChat);
      $.uriAnchor.configModule({
        schema_map: configMap.anchor_schema_map
      });
      return $(window).on('hashchange', onHashchange).trigger('hashchange');
    };
    return {
      initModule: initModule
    };
  })();

}).call(this);
